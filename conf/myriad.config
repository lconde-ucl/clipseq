/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/



params {

    // Max resource options
    max_memory       = '36.GB'
    max_cpus         = 2
    max_time         = '72.h'

    // Input data
    fasta       = 's3://ngi-igenomes/test-data/clipseq/reference/GRCh38.primary_assembly.genome.fa.gz'
    smrna_fasta = './tests/data/genome/homosapiens_smallRNA.fa.gz'
    gtf         = 's3://ngi-igenomes/test-data/clipseq/reference/gencode.v37.primary_assembly.annotation.gtf.gz'

    publish_dir_mode = 'copy'

}

env {
    TMPDIR="./"
}

singularity {
	enabled = true
	autoMounts = true
}

process {

    executor = 'sge'
    penv = 'smp'
    clusterOptions = { "-l mem=${task.memory.giga}G" }

    // these processes get stuck when sent via qsub, so run in local
    withName: 'STAR_GENOMEGENERATE' {
        executor = 'local'
        cpus = 1
        memory = '24.GB'
    }

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 12.h  * task.attempt, 'time'   ) }

    errorStrategy = 'ignore'
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 2    * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 72.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}

